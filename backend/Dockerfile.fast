# syntax=docker/dockerfile:1
# This Dockerfile uses BuildKit features for maximum build speed
# Use with: DOCKER_BUILDKIT=1 docker build -f Dockerfile.fast .

FROM rust:1.85 AS builder

WORKDIR /app

# Install sqlx-cli using cargo-binstall for speed
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    cargo install cargo-binstall && \
    cargo binstall sqlx-cli --no-default-features --features sqlite --no-confirm

# Copy dependency files
COPY Cargo.toml Cargo.lock ./

# Create dummy source to build dependencies with cache mounts
RUN mkdir -p src && echo "fn main() {}" > src/main.rs

# Build dependencies with cargo cache
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    --mount=type=cache,target=/app/target \
    cargo build --release

# Remove dummy files but keep target cache
RUN rm -rf src && rm -f target/release/deps/backend*

# Copy source code
COPY src ./src
COPY migrations ./migrations

# Create database and prepare SQLx offline data
RUN sqlx database create --database-url sqlite:/tmp/build.db && \
    sqlx migrate run --database-url sqlite:/tmp/build.db && \
    cargo sqlx prepare --database-url sqlite:/tmp/build.db

# Build the application with caches
ENV SQLX_OFFLINE=true
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    --mount=type=cache,target=/app/target \
    cargo build --release && \
    cp target/release/backend /tmp/backend

# Final runtime stage
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends libssl3 ca-certificates && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Copy binary and migrations
COPY --from=builder /tmp/backend /app/backend
COPY --from=builder /app/migrations /app/migrations

# Security: run as non-root user
RUN useradd -m -u 1001 appuser && chown -R appuser:appuser /app
USER appuser

EXPOSE 8000
CMD ["./backend"] 